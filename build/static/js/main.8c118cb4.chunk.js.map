{"version":3,"sources":["Waveform.js","PlayList.js","App.js","index.js"],"names":["formWaveSurferOptions","ref","container","waveColor","progressColor","cursorColor","barWidth","barRadius","responsive","height","normalize","partialRender","Waveform","_ref","url","waveformRef","useRef","wavesurfer","playing","setPlay","useState","volume","setVolume","useEffect","options","current","WaveSurfer","create","registerPlugin","Spectrogram","labels","splitChannels","load","on","destroy","React","createElement","id","className","onClick","handlePlayPause","playPause","type","name","min","max","step","onChange","e","target","newVolume","value","defaultValue","htmlFor","PlayList","tracks","selectedTrack","setSelectedTrack","map","track","key","title","App","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"+KAMA,MAAMA,EAAwBC,IAAG,CAC/BC,UAAWD,EACXE,UAAW,OACXC,cAAe,YACfC,YAAa,YACbC,SAAU,EACVC,UAAW,EACXC,YAAY,EACZC,OAAQ,IAERC,WAAW,EAEXC,eAAe,IAGF,SAASC,EAAQC,GAAU,IAATC,IAAEA,GAAKD,EACtC,MAAME,EAAcC,iBAAO,MACrBC,EAAaD,iBAAO,OACnBE,EAASC,GAAWC,oBAAS,IAC7BC,EAAQC,GAAaF,mBAAS,IAIrCG,oBAAU,KACRJ,GAAQ,GAER,MAAMK,EAAUxB,EAAsBe,EAAYU,SA0BlD,OAzBAR,EAAWQ,QAAUC,IAAWC,OAAOH,GACvCP,EAAWQ,QAAQG,eACfC,IAAYF,OAAO,CACjBG,QAAQ,EACRrB,OAAQ,IACRsB,eAAe,KAIrBd,EAAWQ,QAAQO,KAAKlB,GAExBG,EAAWQ,QAAQQ,GAAG,QAAS,WAMzBhB,EAAWQ,UACbR,EAAWQ,QAAQH,UAAUD,GAC7BC,EAAUD,MAMP,IAAMJ,EAAWQ,QAAQS,WAC/B,CAACpB,IAiBJ,OACEqB,IAAAC,cAAA,WACED,IAAAC,cAAA,OAAKC,GAAG,WAAWpC,IAAKc,IACxBoB,IAAAC,cAAA,OAAKE,UAAU,YACbH,IAAAC,cAAA,UAAQG,QAnBUC,KACtBrB,GAASD,GACTD,EAAWQ,QAAQgB,cAiBqBvB,EAAmB,QAAT,QAC9CiB,IAAAC,cAAA,SACEM,KAAK,QACLL,GAAG,SACHM,KAAK,SAGLC,IAAI,OACJC,IAAI,IACJC,KAAK,OACLC,SAxBeC,IACrB,MAAMC,OAAEA,GAAWD,EACbE,GAAaD,EAAOE,MAEtBD,IACF5B,EAAU4B,GACVjC,EAAWQ,QAAQH,UAAU4B,GAAa,KAmBtCE,aAAc/B,IAEhBc,IAAAC,cAAA,SAAOiB,QAAQ,UAAS,YCvEjBC,MApBEzC,IAAiD,IAAhD0C,OAAEA,EAAMC,cAAEA,EAAaC,iBAAEA,GAAkB5C,EAC3D,OACEsB,IAAAC,cAAA,OAAKE,UAAU,YACZiB,EAAOG,IAAIC,GACVxB,IAAAC,cAAA,OACEwB,IAAKD,EAAMtB,GACXC,UACEqB,EAAMtB,KAAOmB,EAAcnB,GACvB,yBACA,gBAENE,QAASA,IAAMkB,EAAiBE,IAE/BA,EAAME,UCPjB,MAAMN,EAAS,CACb,CACElB,GAAI,EACJwB,MAAO,QACP/C,IAAK,yCAEP,CACEuB,GAAI,EACJwB,MAAO,YACP/C,IAAK,4DAIM,SAASgD,IACtB,MAAON,EAAeC,GAAoBrC,mBAASmC,EAAO,IAE1D,OACEpB,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAACxB,EAAQ,CAACE,IAAK0C,EAAc1C,MAC7BqB,IAAAC,cAACkB,EAAQ,CACPC,OAAQA,EACRC,cAAeA,EACfC,iBAAkBA,IAEpBtB,IAAAC,cAAA,YC3BN,MAAM2B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACPhC,IAAAC,cAACD,IAAMiC,WAAU,KACfjC,IAAAC,cAAC0B,EAAG,OAENC","file":"static/js/main.8c118cb4.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport WaveSurfer from \"wavesurfer.js\";\r\nimport Spectrogram from 'wavesurfer.js/dist/plugins/spectrogram.js'\r\n// import Regions from 'wavesurfer.js/dist/plugins/regions.esm.js'\r\n\r\nconst formWaveSurferOptions = ref => ({\r\n  container: ref,\r\n  waveColor: \"#eee\",\r\n  progressColor: \"OrangeRed\",\r\n  cursorColor: \"OrangeRed\",\r\n  barWidth: 3,\r\n  barRadius: 3,\r\n  responsive: true,\r\n  height: 150,\r\n  // If true, normalize by the maximum peak instead of 1.0.\r\n  normalize: true,\r\n  // Use the PeakCache to improve rendering speed of large waveforms.\r\n  partialRender: true\r\n});\r\n\r\nexport default function Waveform({ url }) {\r\n  const waveformRef = useRef(null);\r\n  const wavesurfer = useRef(null);\r\n  const [playing, setPlay] = useState(false);\r\n  const [volume, setVolume] = useState(0.5);\r\n\r\n  // create new WaveSurfer instance\r\n  // On component mount and when url changes\r\n  useEffect(() => {\r\n    setPlay(false);\r\n\r\n    const options = formWaveSurferOptions(waveformRef.current);\r\n    wavesurfer.current = WaveSurfer.create(options);\r\n    wavesurfer.current.registerPlugin(\r\n        Spectrogram.create({\r\n          labels: true,\r\n          height: 200,\r\n          splitChannels: true,\r\n        }),\r\n      )\r\n\r\n    wavesurfer.current.load(url);\r\n\r\n    wavesurfer.current.on(\"ready\", function() {\r\n      // https://wavesurfer-js.org/docs/methods.html\r\n      // wavesurfer.current.play();\r\n      // setPlay(true);\r\n\r\n      // make sure object stillavailable when file loaded\r\n      if (wavesurfer.current) {\r\n        wavesurfer.current.setVolume(volume);\r\n        setVolume(volume);\r\n      }\r\n    });\r\n\r\n    // Removes events, elements and disconnects Web Audio nodes.\r\n    // when component unmount\r\n    return () => wavesurfer.current.destroy();\r\n  }, [url]);\r\n\r\n  const handlePlayPause = () => {\r\n    setPlay(!playing);\r\n    wavesurfer.current.playPause();\r\n  };\r\n\r\n  const onVolumeChange = e => {\r\n    const { target } = e;\r\n    const newVolume = +target.value;\r\n\r\n    if (newVolume) {\r\n      setVolume(newVolume);\r\n      wavesurfer.current.setVolume(newVolume || 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"waveform\" ref={waveformRef} />\r\n      <div className=\"controls\">\r\n        <button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>\r\n        <input\r\n          type=\"range\"\r\n          id=\"volume\"\r\n          name=\"volume\"\r\n          // waveSurfer recognize value of `0` same as `1`\r\n          //  so we need to set some zero-ish value for silence\r\n          min=\"0.01\"\r\n          max=\"1\"\r\n          step=\".025\"\r\n          onChange={onVolumeChange}\r\n          defaultValue={volume}\r\n        />\r\n        <label htmlFor=\"volume\">Volume</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst PlayList = ({ tracks, selectedTrack, setSelectedTrack }) => {\r\n  return (\r\n    <div className=\"playlist\">\r\n      {tracks.map(track => (\r\n        <div\r\n          key={track.id}\r\n          className={\r\n            track.id === selectedTrack.id\r\n              ? \"playlist-item selected\"\r\n              : \"playlist-item\"\r\n          }\r\n          onClick={() => setSelectedTrack(track)}\r\n        >\r\n          {track.title}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayList;\r\n","import React, { useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nimport Waveform from \"./Waveform\";\r\nimport PlayList from \"./PlayList\";\r\n\r\n// const url = \"https://www.mfiles.co.uk/mp3-downloads/gs-cd-track2.mp3\";\r\n\r\nconst tracks = [\r\n  {\r\n    id: 0,\r\n    title: \"1.mp3\",\r\n    url: \"https://animal-delta.vercel.app/1.mp3\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"60429.mp3\",\r\n    url: \"https://www.mfiles.co.uk/mp3-downloads/gs-cd-track2.mp3\",\r\n  },\r\n];\r\n\r\nexport default function App() {\r\n  const [selectedTrack, setSelectedTrack] = useState(tracks[0]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Waveform url={selectedTrack.url} />\r\n      <PlayList\r\n        tracks={tracks}\r\n        selectedTrack={selectedTrack}\r\n        setSelectedTrack={setSelectedTrack}\r\n      />\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}